#include <stdio.h>
#include <stdint.h>

#define DES_KEY_SIZE 8
#define NUM_ROUNDS 16

static const int PC1[56] = {
    57, 49, 41, 33, 25, 17, 9,  1,
    58, 50, 42, 34, 26, 18, 10, 2,
    59, 51, 43, 35, 27, 19, 11, 3,
    60, 52, 44, 36, 63, 55, 47, 39,
    31, 23, 15, 7,  62, 54, 46, 38,
    30, 22, 14, 6,  61, 53, 45, 37,
    29, 21, 13, 5,  28, 20, 12, 4
};

static const int PC2[48] = {
    14, 17, 11, 24, 1,  5,  3, 28,
    15, 6, 21, 10, 23, 19, 12, 4,
    26, 8, 16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55, 30, 40,
    51, 45, 33, 48, 44, 49, 39, 56,
    34, 53, 46, 42, 50, 36, 29, 32
};

static const int SHIFT_SCHEDULE[NUM_ROUNDS] = {
    1, 1, 2, 2, 2, 2, 1, 1,
    2, 2, 2, 2, 1, 1, 2, 2
};

uint64_t permute(uint64_t input, const int *table, int size) {
    uint64_t result = 0;
    for (int i = 0; i < size; i++) {
        result |= ((input >> (64 - table[i])) & 1) << (size - 1 - i);
    }
    return result;
}

void generate_keys(uint64_t key, uint64_t keys[NUM_ROUNDS]) {
    key = permute(key, PC1, 56);
    uint64_t left = key >> 28;
    uint64_t right = key & 0xFFFFFFF;
    
    for (int i = 0; i < NUM_ROUNDS; i++) {
        left = ((left << SHIFT_SCHEDULE[i]) | (left >> (28 - SHIFT_SCHEDULE[i]))) & 0xFFFFFFF;
        right = ((right << SHIFT_SCHEDULE[i]) | (right >> (28 - SHIFT_SCHEDULE[i]))) & 0xFFFFFFF;
        uint64_t combined = (left << 28) | right;
        keys[i] = permute(combined, PC2, 48);
    }
}

int main() {
    uint64_t key = 0x133457799BBCDFF1;
    uint64_t keys[NUM_ROUNDS];
    
    generate_keys(key, keys);
    
    printf("Generated Subkeys:\n");
    for (int i = 0; i < NUM_ROUNDS; i++) {
        printf("K%d: 0x%012llX\n", i + 1, keys[i]);
    }
    
    return 0;
}
